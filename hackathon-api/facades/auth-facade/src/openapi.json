{
  "openapi": "3.0.0",
  "info": {
    "title": "auth-facade",
    "version": "1.0.0",
    "description": "auth-facade",
    "contact": {
      "name": "sumit.singhania@sourcefuse.com",
      "email": "sumit.singhania@sourcefuse.com"
    }
  },
  "paths": {
    "/auth/archive": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "archiveCall",
        "tags": [
          "AuthController"
        ],
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "description": "join call detail",
        "responses": {
          "200": {
            "description": "return join call detail"
          },
          "400": {
            "description": "The syntax of the request entity is incorrect."
          },
          "401": {
            "description": "Invalid Credentials."
          },
          "404": {
            "description": "The entity requested does not exist."
          },
          "422": {
            "description": "The syntax of the request entity is incorrect"
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AuthController.archiveCall"
      }
    },
    "/auth/auth-token": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "getVideoLink",
        "tags": [
          "AuthController"
        ],
        "description": "join call detail",
        "responses": {
          "200": {
            "description": "return join call detail"
          },
          "400": {
            "description": "The syntax of the request entity is incorrect."
          },
          "401": {
            "description": "Invalid Credentials."
          },
          "404": {
            "description": "The entity requested does not exist."
          },
          "422": {
            "description": "The syntax of the request entity is incorrect"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "operationId": "AuthController.getVideoLink"
      }
    },
    "/auth/endCall": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "endCall",
        "tags": [
          "AuthController"
        ],
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "description": "join call detail",
        "responses": {
          "200": {
            "description": "return join call detail"
          },
          "400": {
            "description": "The syntax of the request entity is incorrect."
          },
          "401": {
            "description": "Invalid Credentials."
          },
          "404": {
            "description": "The entity requested does not exist."
          },
          "422": {
            "description": "The syntax of the request entity is incorrect"
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AuthController.endCall"
      }
    },
    "/auth/join-call": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "joinCallDetail",
        "tags": [
          "AuthController"
        ],
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "description": "join call detail",
        "responses": {
          "200": {
            "description": "return join call detail"
          },
          "400": {
            "description": "The syntax of the request entity is incorrect."
          },
          "401": {
            "description": "Invalid Credentials."
          },
          "404": {
            "description": "The entity requested does not exist."
          },
          "422": {
            "description": "The syntax of the request entity is incorrect"
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AuthController.joinCallDetail"
      }
    },
    "/auth/provider-join-call": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "providerJoinCallDetail",
        "tags": [
          "AuthController"
        ],
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "description": "join call detail",
        "responses": {
          "200": {
            "description": "return join call detail"
          },
          "400": {
            "description": "The syntax of the request entity is incorrect."
          },
          "401": {
            "description": "Invalid Credentials."
          },
          "404": {
            "description": "The entity requested does not exist."
          },
          "422": {
            "description": "The syntax of the request entity is incorrect"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "operationId": "AuthController.providerJoinCallDetail"
      }
    },
    "/auth/register-user": {
      "post": {
        "x-controller-name": "AuthController",
        "x-operation-name": "createUser",
        "tags": [
          "AuthController"
        ],
        "description": "register user and send redirect link",
        "responses": {
          "200": {
            "description": "register user and send redirect link"
          },
          "400": {
            "description": "The syntax of the request entity is incorrect."
          },
          "401": {
            "description": "Invalid Credentials."
          },
          "404": {
            "description": "The entity requested does not exist."
          },
          "422": {
            "description": "The syntax of the request entity is incorrect"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPartial"
              }
            }
          }
        },
        "operationId": "AuthController.createUser"
      }
    },
    "/auth/user": {
      "patch": {
        "x-controller-name": "AuthController",
        "x-operation-name": "updateAll",
        "tags": [
          "AuthController"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "User PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "User.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<User>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPartial"
              }
            }
          }
        },
        "operationId": "AuthController.updateAll"
      }
    },
    "/file-upload": {
      "post": {
        "x-controller-name": "FileUploadController",
        "x-operation-name": "uploadFile",
        "tags": [
          "FileUploadController"
        ],
        "description": "General file upload",
        "responses": {
          "200": {
            "description": "Upload file"
          },
          "400": {
            "description": "The syntax of the request entity is incorrect."
          },
          "401": {
            "description": "Invalid Credentials."
          },
          "404": {
            "description": "The entity requested does not exist."
          },
          "422": {
            "description": "The syntax of the request entity is incorrect"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "x-parser": "stream",
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "multipart/form-data",
          "required": true
        },
        "operationId": "FileUploadController.uploadFile"
      }
    },
    "/otp-verify/send-otp": {
      "post": {
        "x-controller-name": "NotifController",
        "x-operation-name": "sendOtp",
        "tags": [
          "NotifController"
        ],
        "responses": {},
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "operationId": "NotifController.sendOtp"
      }
    },
    "/otp-verify/verify": {
      "post": {
        "x-controller-name": "NotifController",
        "x-operation-name": "verifyOtp",
        "tags": [
          "NotifController"
        ],
        "responses": {},
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "operationId": "NotifController.verifyOtp"
      }
    },
    "/ping": {
      "get": {
        "x-controller-name": "PingController",
        "x-operation-name": "ping",
        "tags": [
          "PingController"
        ],
        "responses": {
          "200": {
            "description": "Ping Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          }
        },
        "description": "",
        "operationId": "PingController.ping"
      }
    },
    "/send-sms": {
      "post": {
        "x-controller-name": "NotifController",
        "x-operation-name": "create",
        "tags": [
          "NotifController"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "Return value of NotifController.create",
            "content": {}
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "operationId": "NotifController.create"
      }
    },
    "/": {
      "get": {
        "x-controller-name": "HomePageController",
        "x-operation-name": "homePage",
        "tags": [
          "HomePageController"
        ],
        "responses": {
          "200": {
            "description": "Home Page",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "",
        "operationId": "HomePageController.homePage"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "": {},
      "UserPartial": {
        "title": "UserPartial",
        "type": "object",
        "description": "(tsType: Partial<User>, schemaOptions: { partial: true })",
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "deletedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "modifiedBy": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "pattern": "^\\+?[1-9]\\d{1,14}$"
          },
          "authClientIds": {
            "type": "string"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time"
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "description": "This field takes a single character as input in database.\n    'M' for male and 'F' for female.",
            "enum": [
              "M",
              "F",
              "O"
            ]
          },
          "joinCallData": {
            "type": "object"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<User>"
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "deletedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "modifiedBy": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "pattern": "^\\+?[1-9]\\d{1,14}$"
          },
          "authClientIds": {
            "type": "string"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time"
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "description": "This field takes a single character as input in database.\n    'M' for male and 'F' for female.",
            "enum": [
              "M",
              "F",
              "O"
            ]
          },
          "joinCallData": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "loopback.Count": {
        "type": "object",
        "title": "loopback.Count",
        "x-typescript-type": "@loopback/repository#Count",
        "properties": {
          "count": {
            "type": "number"
          }
        }
      },
      "PingResponse": {
        "type": "object",
        "title": "PingResponse",
        "properties": {
          "greeting": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "properties": {
              "Content-Type": {
                "type": "string"
              }
            },
            "additionalProperties": true
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ]
}